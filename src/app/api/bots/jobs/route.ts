// This is an autogenerated file from Firebase Studio.
'use server';

import {NextResponse} from 'next/server';
import {authenticateRequest} from '@/lib/auth';
import {logAuditEvent} from '@/lib/db';
import {scrapeWebPage} from '@/lib/services/scraping-service';
import {
  automatedEntityEnrichment,
  AutomatedEntityEnrichmentInput,
} from '@/ai/flows/automated-entity-enrichment';

/**
 * POST /api/bots/jobs
 * Initiates a new bot job to scrape and analyze a target URL.
 */
export async function POST(request: Request) {
  try {
    const authResult = await authenticateRequest(request);
    if (authResult.error) {
      return NextResponse.json(
        {error: authResult.error},
        {status: authResult.status}
      );
    }
    const operatorId = authResult.decodedToken.operatorId;

    const {targetUrl, cookies} = await request.json();

    if (!targetUrl) {
      return NextResponse.json(
        {error: 'targetUrl is required.'},
        {status: 400}
      );
    }

    await logAuditEvent(
      'BOT_JOB_STARTED',
      operatorId,
      `Job started for target: ${targetUrl}`
    );

    // 1. Scrape the web page to get text content.
    // (Currently a placeholder, will be replaced with a real scraper).
    const scrapedText = await scrapeWebPage(targetUrl, cookies);
    if (!scrapedText) {
      return NextResponse.json(
        {error: 'Failed to scrape content from the target URL.'},
        {status: 500}
      );
    }

    // 2. Send the scraped text to the AI flow for enrichment.
    const enrichmentInput: AutomatedEntityEnrichmentInput = {
      text: scrapedText,
    };
    const enrichmentOutput = await automatedEntityEnrichment(enrichmentInput);

    // 3. For now, return the extracted entities directly.
    // In the future, we will store them in the database.
    await logAuditEvent(
      'BOT_JOB_COMPLETED',
      operatorId,
      `Job for ${targetUrl} completed. Extracted ${enrichmentOutput.entities.length} entities.`
    );

    return NextResponse.json(enrichmentOutput);
  } catch (error: any) {
    console.error('[BOT_JOB_ERROR]', error);
    await logAuditEvent(
      'API_ERROR',
      'SYSTEM',
      `Error during bot job: ${error.message}`
    );
    return NextResponse.json(
      {error: 'Failed to execute bot job.', details: error.message},
      {status: 500}
    );
  }
}
